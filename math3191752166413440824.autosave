float findIntersection(float y) {
    float y0 = start.y, y1 = h1.y, y2 = h2.y, y3 = end.y;
    float a = 3*y1 + y3 - y0 - 3*y2;
    float b = 3*y0 + 3*y2 - 6*y1;
    float c = 3*y1 - 3*y0;
    float d = y0;

    float t = solveCubic(a, b, c, d - y);
    return getXValue(t);
}

// float solveCubic(float a, float b, float c, float d){
//     float D0 = b*b - 3*a*c;
//     float d1 = 2*b*b*b - 9*a*b*c + 27*a*a*d;
//     float C = pow((d1 + sqrt(d1*d1 - 4*D0*D0*D0)) / 2, 1/3);
//     return - (b + C + D0/C) / 3*a;
// }

float solveCubic(float a, float b, float c, float d) {
    float p = (3*a*c - b*b) / (3*a*a);
    float q = (2*b*b*b - 9*a*b*c + 27*a*a*d) / 27*a*a*a;
    float D = q*q / 4 + p*p*p / 27;
    float u1 = -(q / 2) + sqrt(D);
    float u2 = -(q / 2) - sqrt(D);
    return pow(u1, 1/3) - pow(u1, 1/3) - b / 3*a;
}

float getXValue(float t) {
    float x0 = start.x, x1 = h1.x, x2 = h2.x, x3 = end.x;
    float a = 3*x1 + x3 - x0 - 3*x2;
    float b = 3*x0 + 3*x2 - 6*x1;
    float c = 3*x1 - 3*x0;
    float d = x0;
    return a*pow(t,3) + b*sq(t) + c*t +d;
}
